@page "/users/edit/{UserId}"
@attribute [Authorize(Policy = PolicieRoles.Admin)]
@inject NavigationManager navigationManager
@inject IUserClientService userService


<MatSnackbar @bind-IsOpen="@snackBarIsOpen">
    <MatSnackbarContent>Hubo un error al editar el usuario: @message </MatSnackbarContent>
</MatSnackbar>
<div class="row justify-content-center">

    @if (isLoading)
    {
        <MatProgressBar Indeterminate="true"></MatProgressBar>
    }
    else
    {
        <EditForm Model="User" OnValidSubmit="FormSubmitted">
            <DataAnnotationsValidator />
            <div class="mat-layout-grid">
                <div class="mat-layout-grid-inner">
                    <div class="mat-layout-grid-cell-span-12">
                        <MatCard class="demo-mat-card">
                            <div class="demo-mat-card-content">
                                <MatHeadline6 class="demo-mat-card-clean-margin">
                                    Editar Usuario
                                </MatHeadline6>

                            </div>
                            <MatCardContent>
                                <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin">
                                    <p>
                                        <MatTextField @bind-Value="@User.Username" Label="Email" FullWidth="true"></MatTextField>
                                        <ValidationMessage For="@(() => User.Username)" />

                                    </p>
                                </MatBody2>
                            </MatCardContent>
                            <MatCardContent>
                                <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin">
                                    <p>
                                        <MatSelectItem @bind-Value="User.Role" Items="@valueItems">
                                        </MatSelectItem>
                                    </p>
                                </MatBody2>
                            </MatCardContent>
                            <MatCardActions>
                                <MatCardActionButtons>
                                    <MatButton Raised="true" Type="submit" Icon="@MatIconNames.Edit">Editar</MatButton>
                                </MatCardActionButtons>

                                <MatCardActionIcons>
                                    <MatIconButton Icon="@MatIconNames.Close" OnClick="CancelClickHandle"></MatIconButton>
                                </MatCardActionIcons>
                            </MatCardActions>
                        </MatCard>
                    </div>
                </div>
            </div>
        </EditForm>
    }
</div>


@code {

    [Parameter]
    public string UserId { get; set; }


    public User User = new User();
    bool isLoading = true;
    bool snackBarIsOpen = false;
    string message = string.Empty;

    UserRole[] valueItems = Enum.GetValues(typeof(UserRole)).Cast<UserRole>().ToArray();

    protected override async Task OnInitializedAsync()
    {
        var response = await userService.GetUserAsync(Guid.Parse(UserId));
        if (response.Success)
        {
            User = response.Result;
        }
        else
        {
            message = response.Message;
            snackBarIsOpen = true;
        }
        isLoading = false;
        StateHasChanged();
    }

    async Task FormSubmitted(EditContext editContext)
    {
        if (editContext.Validate())
        {
            isLoading = true;
            StateHasChanged();
            Response res = await userService.UpdateUserAsync(User);

            if (res.Success)
            {
                navigationManager.NavigateTo("users");
            }
            else
            {
                message = res.Message;
                snackBarIsOpen = true;
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    void CancelClickHandle()
    {
        navigationManager.NavigateTo("users");
    }

}
