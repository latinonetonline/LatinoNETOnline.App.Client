@page "/events/{Year}/{Month}/{EventId}/article/new"
@attribute [Authorize(Policy = PolicieRoles.Organizer)]
@inject NavigationManager _navigationManager
@inject IJSRuntime jsRuntime
@inject IBlogClientService blogService
@inject IEventClientService eventService

<MatSnackbar @bind-IsOpen="@snackBarIsOpen">
    <MatSnackbarContent>@message </MatSnackbarContent>
</MatSnackbar>

@if (isStylesLoading || isArticleLoading)
{
    <MatProgressBar Indeterminate="true"></MatProgressBar>
}
else
{
    <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8">
                <MatTextField @bind-Value="@Article.Title" Label="Titulo" FullWidth="true"></MatTextField>
                <MatTextField @bind-Value="@Article.Description" Label="Descripción" FullWidth="true" TextArea="true"></MatTextField>
                <br />
                <div class="text-editor">
                    <BlazoredTextEditor @ref="@QuillHtml">
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>

                            <QuillFormats JsRuntime="jsRuntime" QuillHtml="QuillHtml" />

                        </ToolbarContent>
                        <EditorContent>
                            @if (string.IsNullOrWhiteSpace(Article.Html))
                            {
                                <h4>This Toolbar works with HTML</h4>
                                <a href="http://BlazorHelpWebsite.com">
                                    BlazorHelpWebsite.com
                                </a>
                            }
                            else
                            {
                                @((MarkupString)Article.Html)
                            }

                        </EditorContent>
                    </BlazoredTextEditor>
                    <br />
                </div>
            </div>
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
                <BottonActions Article="Article" Event="Event" QuillHtml="QuillHtml" BlogService="blogService" OnError=HandleError OnSaved="HandleSaved" OnSaving="HandleSaving" />
            </div>
        </div>
    </div>
}


@code {

    [Parameter]
    public string EventId { get; set; }
    [Parameter]
    public string Year { get; set; }
    [Parameter]
    public string Month { get; set; }

    public Article Article { get; set; }

    public Event Event { get; set; }

    bool isStylesLoading = true;
    bool isArticleLoading = true;

    bool snackBarIsOpen = false;
    string message = string.Empty;

    BlazoredTextEditor QuillHtml = default;
    BlazoredTextEditor QuillNative = default;
    BlazoredTextEditor QuillReadOnly = default;

    string QuillContent = default;

    bool mode = false;

    protected override async Task OnInitializedAsync()
    {
        Event = (await eventService.GetEventAsync(int.Parse(Year), int.Parse(Month), Guid.Parse(EventId))).Result;

        Article = (await blogService.GetArticleAsync(Event.GetSlug())).Result;

        Article.Title = Event.Title;
        isArticleLoading = false;
        StateHasChanged();
        if (!string.IsNullOrWhiteSpace(Article.Html))
        {
            await this.QuillHtml.LoadHTMLContent(Article.Html);
        }

        StateHasChanged();
    }

    void StylesLoaded()
    {
        isStylesLoading = false;
        StateHasChanged();
    }

    public async Task SetHTML()
    {
        string QuillContent = await this.QuillHtml.GetHTML();
        string youtube = "<p><iframe width='560' height='315' src='https://www.youtube.com/embed/lYNxsv-XmZc' frameborder='0' allow='accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture' allowfullscreen></iframe></p>";


        await this.QuillHtml.LoadHTMLContent(QuillContent + youtube);
        StateHasChanged();
    }

    public async void GetContent()
    {
        QuillContent = await this.QuillNative.GetContent();
        StateHasChanged();
    }

    public async void LoadContent()
    {
        await this.QuillNative.LoadContent(QuillContent);
        StateHasChanged();
    }

    public async void InsertImage()
    {
        await this.QuillNative.InsertImage("images/BlazorHelpWebsite.gif");
        StateHasChanged();
    }

    async Task ToggleQuillEditor()
    {
        mode = (mode) ? false : true;
        await this.QuillReadOnly.EnableEditor(mode);
    }

    void HandleError(string message)
    {
        this.message = message;
        snackBarIsOpen = true;
        isArticleLoading = false;
        StateHasChanged();
    }

    void HandleSaving()
    {
        isArticleLoading = true;
        StateHasChanged();
    }

    void HandleSaved(string message)
    {
        this.message = message;
        snackBarIsOpen = true;
        isArticleLoading = false;
        StateHasChanged();
    }
}
