@page "/twitter"
@attribute [Authorize(Policy = PolicieRoles.Organizer)]
@inject NavigationManager _navigationManager
@inject IFileClientService fileService
@inject ITwitterClientService twitterService
@inject ICanvasInteropService canvasJsRuntime
@inject IInputInteropService inputJsRuntime

<MatSnackbar @bind-IsOpen="@snackBarIsOpen">
    <MatSnackbarContent>Hubo un error al crear un nuevo tweet: @message </MatSnackbarContent>
</MatSnackbar>


@if (isLoading)
{
    <MatProgressBar Indeterminate="true"></MatProgressBar>
}
else
{
    <AutoSaveEditForm Id="twitter-new" Model="Tweet" OnValidSubmit="FormSubmitted">
        <DataAnnotationsValidator />
        <div class="mat-layout-grid">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell-span-6">

                    <MatHeadline6 class="demo-mat-card-clean-margin">
                        Nuevo Tweet
                    </MatHeadline6>

                    <p>
                        <MatStringField @bind-Value="@Tweet.Status" Label="Tweet" FullWidth="true" TextArea="true" OnKeyUp="@Status_OnInput" @ref="statusInputReference" maxlength="280"></MatStringField>
                        <label>@((Tweet.Status?.Count() ?? 0) + "/280")</label>

                        <ValidationMessage For="@(() => Tweet.Status)" />
                    </p>
                    <p><b>Fecha del tweet</b></p>
                    <p>
                        <MatDatePicker @bind-Value="@Tweet.Date" PlaceHolder="Fecha" FullWidth="true" Format="dd/MM/yy H:mm:ss"></MatDatePicker>
                        <ValidationMessage For="@(() => Tweet.Date)" />
                    </p>
                    <p><b>Imagen</b></p>
                    <p>
                        <input type="file" id="tweet-image-upload" @onchange="ImageInput_OnChange" @ref="FileInputReference" />

                        <canvas id="mycanvas" @ref="CanvasReference" />

                    </p>

                    <MatCardActions>
                        <MatCardActionButtons>
                            <MatButton Raised="true" Type="submit" Icon="@MatIconNames.Add">Nuevo</MatButton>
                        </MatCardActionButtons>

                        <MatCardActionIcons>
                            <MatIconButton Icon="@MatIconNames.Close" OnClick="CancelClickHandle"></MatIconButton>
                        </MatCardActionIcons>
                    </MatCardActions>

                </div>

                @if (MentionsAndHashtags.Mentions?.Any() ?? false)
                {
                    <div class="mat-layout-grid-cell-span-3">
                        <VirtualScroll Items="MentionsAndHashtags.Mentions" OnClick="Word_OnClick" Icon=@MatIconNames.Person />
                    </div>
                }

                @if (MentionsAndHashtags.Hashtags?.Any() ?? false)
                {
                    <div class="mat-layout-grid-cell-span-3">
                        <VirtualScroll Items="MentionsAndHashtags.Hashtags" OnClick="Word_OnClick" Icon=@MatIconNames.Blur_on />
                    </div>
                }

                @if (!string.IsNullOrWhiteSpace(tweetCreatedUrl))
                {
                    <iframe class="ql-video" frameborder="0" allowfullscreen="true" src=@($"https://twitframe.com/show?url={tweetCreatedUrl}") height="500" width="550" data-blot-formatter-unclickable-bound="true"></iframe>
                }
            </div>
        </div>
    </AutoSaveEditForm>
}



@code {

    MatStringField statusInputReference;

    const string VARIABLE_NAME = "fileTempVar";
    CreateTweetRequest Tweet = new CreateTweetRequest();
    MentionsAndHashtags MentionsAndHashtags = new MentionsAndHashtags();

    bool isLoading = true;
    bool snackBarIsOpen = false;
    string tweetCreatedUrl = default;

    string message = string.Empty;
    string imageBase64 = default;
    ElementReference CanvasReference;
    ElementReference FileInputReference;


    protected override async Task OnInitializedAsync()
    {
        isLoading = false;
        StateHasChanged();

        var res = await twitterService.GetLastMentionsAndHashtagsAsync();

        if (res.Success)
            MentionsAndHashtags = res.Result;
        else
        {
            message = res.Message;
            snackBarIsOpen = true;
        }

        StateHasChanged();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dotNetReference = DotNetObjectReference.Create(this);

            await canvasJsRuntime.AddPasteEventListener(CanvasReference, FileInputReference, dotNetReference);
            await inputJsRuntime.SetKeyUpDelegateAsync(statusInputReference.InputRef, dotNetReference);
        }
    }

    [JSInvokable("CanvasOnload")]
    public async Task CanvasOnload()
    {
        Tweet.ImageBase64 = await canvasJsRuntime.GetCanvasBase64(CanvasReference);
    }

    async Task FormSubmitted(EditContext editContext)
    {
        bool hasFile = await fileService.HasFileAsync("tweet-image-upload");
        if (editContext.Validate())
        {
            if (hasFile)
            {
                await fileService.ReadFileAsync(VARIABLE_NAME, "tweet-image-upload");
            }

            isLoading = true;

            StateHasChanged();

            var res = await twitterService.CreateTweetAsync(Tweet);
            if (res.Success)
            {
                imageBase64 = default;
                isLoading = false;
                Tweet = new CreateTweetRequest();
                tweetCreatedUrl = res.Result?.Url ?? default;
                StateHasChanged();
            }
            else
            {
                message = res.Message;
                snackBarIsOpen = true;
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    void CancelClickHandle()
    {
        _navigationManager.NavigateTo("events");
    }

    async Task ImageInput_OnChange(ChangeEventArgs e)
    {
        StateHasChanged();
        bool hasFile = await fileService.HasFileAsync("tweet-image-upload");

        if (hasFile)
        {
            var dotNetReference = DotNetObjectReference.Create(this);
            await fileService.ReadFileAsync(VARIABLE_NAME, "tweet-image-upload");
            imageBase64 = hasFile ? fileService.GetFileBase64(VARIABLE_NAME) : default;
            await canvasJsRuntime.SetBase64IntoCanvas(
            CanvasReference,
            $"data:image/png;base64,{imageBase64}",
            dotNetReference);
        }

        StateHasChanged();
    }

    void Word_OnClick(string word)
    {
        Tweet.Status = (Tweet?.Status?.Trim() ?? string.Empty) + " " + word;



        StateHasChanged();
    }

    void Status_OnInput(KeyboardEventArgs e)
    {
        StateHasChanged();
    }

    [JSInvokable("InputOnKeyUp")]
    public async Task Input_OnKeyUp()
    {
        Tweet.Status = await inputJsRuntime.GetTextAsync(statusInputReference.InputRef);

        StateHasChanged();
    }

}