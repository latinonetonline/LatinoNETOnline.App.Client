@page "/polls/"
@attribute [Authorize(Policy = PolicieRoles.Speaker)]
@inject NavigationManager navigationManager
@inject IPollClientService pollService


<MatSnackbar @bind-IsOpen="@snackBarIsOpen">
    <MatSnackbarContent>Hubo un error: @message </MatSnackbarContent>
</MatSnackbar>
@if (isLoading)
{
    <MatProgressBar Indeterminate="true"></MatProgressBar>
}
else
{
    <div class="row justify-content-center">
        <h1>Polls</h1>
    </div>

    <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <MatAccordion>
                    @foreach (var poll in Polls)
                    {
                        <PollExpansionPanel Poll="poll" OnDelete="OnDeleteHandle" />
                    }
                    @if (Polls.Count() == 0)
                    {
                        <h3>No hay polls creados.</h3>
                    }
                </MatAccordion>
            </div>
        </div>
    </div>
    <div class="row justify-content-center">
        <MatButton Raised="true" Icon="@MatIconNames.Add" OnClick="NuevoClickHandle">Nuevo</MatButton>
        <MatButton Raised="true" Icon="@MatIconNames.Close" OnClick="VolverClickHandle">Volver</MatButton>
        <MatButton Icon="@MatIconNames.Delete_forever" OnClick="DeleteAllClickHandle">Borrar Todo</MatButton>
    </div>
}


@code
{

    public Event Event { get; set; }
    public IEnumerable<PollOptions> Polls { get; set; } = new List<PollOptions>();

    bool isLoading = true;

    bool snackBarIsOpen = false;
    string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadPolls();
    }

    void NuevoClickHandle()
    {
        navigationManager.NavigateTo($"/polls/new");
    }

    void VolverClickHandle()
    {
        navigationManager.NavigateTo($"/events");
    }

    async Task DeleteAllClickHandle()
    {
        isLoading = true;
        StateHasChanged();
        var responseDelete = await pollService.DeleteAllAsync();
        if (responseDelete.Success)
        {
            var responseGetPolls = await pollService.GetPollsAsync();
            Polls = responseGetPolls.Result;
        }
        isLoading = false;
        StateHasChanged();
    }

    async Task OnDeleteHandle()
    {
        await LoadPolls();
    }

    async Task LoadPolls()
    {
        isLoading = true;
        StateHasChanged();
        var response = await pollService.GetPollsAsync();
        if (response.Success)
        {
            Polls = response.Result;
        }
        else
        {
            message = response.Message;
            snackBarIsOpen = true;
        }
        isLoading = false;
        StateHasChanged();
    }
}