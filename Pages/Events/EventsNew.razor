@page "/events/new"
@attribute [Authorize(Policy = PolicieRoles.Organizer)]
@inject NavigationManager _navigationManager
@inject IEventClientService eventService
@inject IUserClientService userService
@inject IFileClientService fileService

<MatSnackbar @bind-IsOpen="@snackBarIsOpen">
    <MatSnackbarContent>Hubo un error al crear un nuevo evento: @message </MatSnackbarContent>
</MatSnackbar>


@if (isLoading)
{
    <MatProgressBar Indeterminate="true"></MatProgressBar>
}
else
{
    <AutoSaveEditForm Id="event-new" Model="Event" OnValidSubmit="FormSubmitted">
        <DataAnnotationsValidator />
        <div class="mat-layout-grid">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell-span-6">

                    <MatHeadline6 class="demo-mat-card-clean-margin">
                        Nuevo Evento
                    </MatHeadline6>


                    <p class="input-padding">
                        <MatStringField @bind-Value="@Event.Title" Label="Titulo" FullWidth="true"></MatStringField>
                        <ValidationMessage For="@(() => Event.Title)" />

                    </p>
                    <p class="input-padding">
                        <MatStringField @bind-Value="@Event.Description" Label="Descripción" FullWidth="true" TextArea="true"></MatStringField>
                        <ValidationMessage For="@(() => Event.Description)" />
                    </p>
                    <p class="input-padding">
                    <p><b>Fecha del evento</b></p>
                    <MatDatePicker @bind-Value="@Event.Date" PlaceHolder="Fecha" FullWidth="true" Format="dd/MM/yy H:mm:ss"></MatDatePicker>
                    <ValidationMessage For="@(() => Event.Date)" />
                    </p>
                    <p class="input-padding">
                    <p><b>Flyer del evento</b></p>
                    <input type="file" id="event-image-upload" />
                    </p>
                    <p class="input-padding">
                        <MatStringField @bind-Value="@Event.Speaker" Label="Speaker" FullWidth="true"></MatStringField>
                        <ValidationMessage For="@(() => Event.Speaker)" />
                    </p>
                    <p class="input-padding">
                        <MatStringField @bind-Value="@Event.TwitterSpeaker" Label="Twitter del Speaker" FullWidth="true"></MatStringField>
                        <ValidationMessage For="@(() => Event.TwitterSpeaker)" />
                    </p>

                    <MatCardActions>
                        <MatCardActionButtons>
                            <MatButton Raised="true" Type="submit" Icon="@MatIconNames.Add">Nuevo</MatButton>
                        </MatCardActionButtons>

                        <MatCardActionIcons>
                            <MatIconButton Icon="@MatIconNames.Close" OnClick="CancelClickHandle"></MatIconButton>
                        </MatCardActionIcons>
                    </MatCardActions>

                </div>
                <div class="mat-layout-grid-cell-span-6">
                    <MatCheckbox @bind-Value="@Event.IsDraft" Label="Borrador"></MatCheckbox>
                </div>
            </div>
        </div>
    </AutoSaveEditForm>
}



@code {

    const string VARIABLE_NAME = "fileTempVar";
    Core.Models.Events.CreateEventRequest Event = new Core.Models.Events.CreateEventRequest();
    bool isLoading = true;
    bool snackBarIsOpen = false;
    string message = string.Empty;

    protected override void OnInitialized()
    {
        isLoading = false;
        StateHasChanged();
    }

    async Task FormSubmitted(EditContext editContext)
    {
        bool hasFile = await fileService.HasFileAsync("event-image-upload");
        if (editContext.Validate() && (hasFile || Event.IsDraft))
        {
            if (hasFile)
            {
                await fileService.ReadFileAsync(VARIABLE_NAME, "event-image-upload");
            }

            isLoading = true;

            StateHasChanged();

            Event.ImageBase64 = hasFile ? fileService.GetFileBase64(VARIABLE_NAME) : default;

            Response res = await eventService.CreateEventAsync(Event);

            if (res.Success)
            {
                _navigationManager.NavigateTo("events");
            }
            else
            {
                message = res.Message;
                snackBarIsOpen = true;
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    void CancelClickHandle()
    {
        _navigationManager.NavigateTo("events");
    }

}
