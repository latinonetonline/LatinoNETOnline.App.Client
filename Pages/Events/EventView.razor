@page "/events/view/{year}/{month}/{id}"
@attribute [Authorize(Policy = PolicieRoles.Speaker)]
@inject NavigationManager _navigationManager
@inject IEventClientService eventService
@inject IEventbriteClientService eventbriteService

<MatSnackbar @bind-IsOpen="@snackBarIsOpen">
    <MatSnackbarContent>Hubo un error al visualizar el evento: @message </MatSnackbarContent>
</MatSnackbar>


@if (isLoading)
{
    <MatProgressBar Indeterminate="true"></MatProgressBar>
}
else
{

    <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">

                <MatHeadline6 class="demo-mat-card-clean-margin">
                    Ver Evento
                </MatHeadline6>


                <p class="input-padding">
                    <MatStringField @bind-Value="@Event.Title" Label="Titulo" ReadOnly="true" FullWidth="true"></MatStringField>
                </p>
                <p class="input-padding">
                    <MatStringField @bind-Value="@Event.Description" Label="Descripción" ReadOnly="true" FullWidth="true" TextArea="true"></MatStringField>
                </p>
                <p class="input-padding">
                    <MatDatePicker @bind-Value="@Event.Date" PlaceHolder="Fecha" FullWidth="true" ReadOnly="true" Format="MM/dd/yy H:mm:ss"></MatDatePicker>
                </p>
                <p class="input-padding">
                    <img src="@Event.ImageUrl" width="560" height="315" />
                </p>
                <p class="input-padding">
                    <MatStringField @bind-Value="@Event.Speaker" Label="Speaker" ReadOnly="true" FullWidth="true"></MatStringField>
                </p>
                <p class="input-padding">
                    <MatStringField @bind-Value="@Event.TwitterSpeaker" ReadOnly="true" Label="Twitter del Speaker" FullWidth="true"></MatStringField>
                </p>

                <MatCardActions>
                    <MatCardActionButtons>
                        <MatButton Raised="true" OnClick="EditClickHandle" Icon="@MatIconNames.Edit">Editar</MatButton>
                    </MatCardActionButtons>

                    <MatCardActionIcons>
                        <MatIconButton Icon="@MatIconNames.Close" OnClick="CancelClickHandle"></MatIconButton>
                    </MatCardActionIcons>
                </MatCardActions>

            </div>
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                @if (!string.IsNullOrWhiteSpace(Event.EventbriteEventId))
                {
                    <MatButton Raised="true" Target="_blank" Link=@($"https://eventbrite.com/e/{Event.EventbriteEventId}") Icon="@MatIconNames.Pageview">Ir a Eventbrite</MatButton>
                    <br/>
                    <h5>@($"Hay {orderCount} inscriptos en el evento") </h5>
                }
            </div>
        </div>
    </div>
}
@code {

    [Parameter]
    public string Year { get; set; }
    [Parameter]
    public string Month { get; set; }
    [Parameter]
    public string Id { get; set; }

    public Event Event = new Event();
    bool isLoading = true;
    bool snackBarIsOpen = false;
    string message = string.Empty;
    long orderCount = -1;

    protected override async Task OnInitializedAsync()
    {
        Event = (await eventService.GetEventAsync(int.Parse(Year), int.Parse(Month), Guid.Parse(Id))).Result;
        if (!string.IsNullOrWhiteSpace(Event.EventbriteEventId))
        {
            orderCount = await GetOrderCount();
        }
        isLoading = false;
        StateHasChanged();
    }

    void CancelClickHandle()
    {
        _navigationManager.NavigateTo("events");
    }

    void EditClickHandle()
    {
        _navigationManager.NavigateTo($"events/edit/{Year}/{Month}/{Id}");
    }

    async Task<long> GetOrderCount()
    {
        var orderPage = await eventbriteService.GetOrderPageAsync(Event.EventbriteEventId, 1);
        return orderPage.Result.Pagination.Object_Count;
    }

}

