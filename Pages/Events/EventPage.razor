@page "/events"

@inject NavigationManager _navigationManager
@inject IJSRuntime jsRuntime
@inject IEventClientService eventService

<div class="row justify-content-center">
    <h1>Eventos</h1>
</div>

@if (!isLoading)
{
    <SurveyPrompt Title=@($"El próximo evento es el {nextEvent.Date.ToString("dd/MM/yyyy")}") />
}

<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
            <MatTabGroup @bind-ActiveIndex="@tabIndex">
                <MatTab @onclick="@PreviewClickHandle" Class="less-padding">
                    <LabelContent>
                        <MatIcon Icon="@MatIconNames.Keyboard_arrow_left"></MatIcon>
                    </LabelContent>
                </MatTab>
                @foreach (Month month in activeMonths)
                {
                    <div @onclick="ActiveIndexChangedHandle">
                        <MatTab Label="@month.ToString()" Class="less-padding">
                            @if (isLoading)
                            {
                                <MatProgressBar Indeterminate="true"></MatProgressBar>
                            }
                            else
                            {
                                @if (events.Count() == 0)
                                {
                                    <div class="row justify-content-center">
                                        No hay eventos en este mes
                                    </div>
                                }
                                <div class="mat-layout-grid">
                                    <div class="mat-layout-grid-inner">

                                        @foreach (Event evt in events)
                                        {
                                            <EventCard Event="evt" OnDeleted="DeletedHandle" />
                                        }
                                    </div>
                                </div>
                            }
                        </MatTab>
                    </div>
                }
                <MatTab @onclick="@NextClickHandle" Class="less-padding">
                    <LabelContent>
                        <MatIcon Icon="@MatIconNames.Keyboard_arrow_right"></MatIcon>
                    </LabelContent>
                </MatTab>

            </MatTabGroup>
        </div>
    </div>
</div>
<AuthorizeView Policy="@PolicieRoles.Organizer">
    <div class="row justify-content-center">
        <MatButton Raised="true" Icon="@MatIconNames.Add" OnClick="NuevoClickHandle">Nuevo</MatButton>
    </div>
</AuthorizeView>



@code {

    List<Month> activeMonths = new List<Month>();
    public int tabIndex = 0;
    public int preTabIndex = 0;
    bool isLoading = true;
    private IEnumerable<Event> events = new List<Event>();
    private Event nextEvent;

    protected override async Task OnInitializedAsync()
    {
        UpdateMonths(DateTime.Today.Month);
        nextEvent = (await eventService.GetNextEventAsync()).Result;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            tabIndex = preTabIndex;
            StateHasChanged();
            events = (await eventService.GetEventsAsync(DateTime.Today.Year, DateTime.Today.Month)).Result;
            isLoading = false;
            StateHasChanged();
        }
    }

    async Task PreviewClickHandle()
    {
        int nroMonth = (int)activeMonths[0];
        activeMonths.Clear();

        if (nroMonth < 4)
        {
            FirstMonths();
        }
        else
        {
            CalculateMonths(nroMonth);
            tabIndex = 2;
        }

        StateHasChanged();
        await UpdateEvents();
    }

    async Task DeletedHandle(Event @eventDeleted)
    {
        await UpdateEvents();
        StateHasChanged();
    }

    async Task NextClickHandle()
    {
        int nroMonth = (int)activeMonths[2];
        activeMonths.Clear();

        if (nroMonth > 9)
        {
            LastMonths();
        }
        else
        {
            CalculateMonths(nroMonth);
            tabIndex = 2;
        }

        StateHasChanged();
        await UpdateEvents();
    }

    void UpdateMonths(int nroMonth)
    {
        activeMonths.Clear();

        if (nroMonth < 4)
        {
            FirstMonths();
            preTabIndex = DateTime.Today.Month;
        }
        else if (nroMonth > 8)
        {
            LastMonths();
            preTabIndex = DateTime.Today.Month - 9;
        }
        else
        {
            CalculateMonths(nroMonth);
            preTabIndex = 2;
        }

        StateHasChanged();
    }

    void LastMonths()
    {
        activeMonths.Add(Month.Octubre);
        activeMonths.Add(Month.Noviembre);
        activeMonths.Add(Month.Diciembre);
    }

    void FirstMonths()
    {
        activeMonths.Add(Month.Enero);
        activeMonths.Add(Month.Febrero);
        activeMonths.Add(Month.Marzo);
    }

    void CalculateMonths(int nroMonth)
    {
        activeMonths.Add((Month)nroMonth - 1);
        activeMonths.Add((Month)nroMonth);
        activeMonths.Add((Month)nroMonth + 1);
    }


    void NuevoClickHandle()
    {
        _navigationManager.NavigateTo("events/new");
    }

    async Task UpdateEvents()
    {
        isLoading = true;
        StateHasChanged();

        int month = (int)activeMonths[tabIndex - 1];
        events = (await eventService.GetEventsAsync(DateTime.Today.Year, month)).Result;
        isLoading = false;
        StateHasChanged();
    }

    async Task ActiveIndexChangedHandle()
    {
        await UpdateEvents();
    }
}
