@page "/easycron"
@attribute [Authorize(Policy = PolicieRoles.Organizer)]
@inject IEasyCronClientService easyCronService
@inject NavigationManager navigationManager

<div class="row justify-content-center">
    <h1>Easy Cron</h1>
</div>

<MatSnackbar @bind-IsOpen="@snackBarIsOpen">
    <MatSnackbarContent>Hubó un error: @message </MatSnackbarContent>
</MatSnackbar>

@if (isLoading)
{
    <MatProgressBar Indeterminate="true"></MatProgressBar>
}
else
{
    <MatTable Items="@cronJobs" LoadInitialData="true" Striped="true" RequestApiOnlyOnce="true" AllowSelection="true" RowClass="tester"
              RefBack="@tableForwardRef" FilterByColumnName="Name" DebounceMilliseconds="150" class="mat-elevation-z5">
        <MatTableHeader>
            <th>Name</th>
            <th>Url</th>
            <th>Cron Expression</th>
            <th>Created</th>
            <th>Updated</th>
            <th>Enable</th>
        </MatTableHeader>
        <MatTableRow>
            <td>@context.Cron_Job_Name</td>
            <td>@context.Url</td>
            <td>@CronToDate(context.Cron_Expression).ToString("dd/MM/yyyy HH:mm:ss")</td>
            <td>@context.Created.ToString()</td>
            <td>@context.Updated.ToString()</td>
            <td>@(context.Status ? "✅" : "❌")</td>
            <td>
                <MatButton Raised="true" Icon="@MatIconNames.Edit" OnClick="() => EditClickHandle(context.Cron_Job_Id)">Editar</MatButton>
            </td>
            <td>
                <MatButton Raised="true" Icon="@MatIconNames.Delete" OnClick="() => DeleteClickHandle(context.Cron_Job_Id)">Eliminar</MatButton>
            </td>
        </MatTableRow>
    </MatTable>



    <div class="row justify-content-center">
        <MatButton Raised="true" Icon="@MatIconNames.Add" OnClick="NewClickHandle">Nuevo</MatButton>
    </div>

}


@code {

    CronJob[] cronJobs = default;

    ForwardRef tableForwardRef = new ForwardRef();

    bool isLoading = false;
    bool snackBarIsOpen = false;
    string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetCrons();
    }

    void NewClickHandle()
    {
        navigationManager.NavigateTo("easycron/new");
    }

    void EditClickHandle(long cronId)
    {
        navigationManager.NavigateTo($"easycron/edit/{cronId}");
    }

    async Task DeleteClickHandle(long cronId)
    {
        isLoading = true;
        StateHasChanged();

        Response res = await easyCronService.DeleteJobAsync(cronId);
        if (res.Success)
        {
            await GetCrons();
        }
        else
        {
            message = res.Message;
            snackBarIsOpen = true;
        }


        isLoading = false;
        StateHasChanged();
    }

    async Task GetCrons()
    {
        var response = await easyCronService.ListJobAsync();
        if (response.Success)
        {
            cronJobs = response.Result.Cron_Jobs;
        }
        else
        {
            message = response.Message;
            snackBarIsOpen = true;
        }

        isLoading = false;
        StateHasChanged();
    }

    DateTime CronToDate(string cron)
    {
        var values = cron.Split(" ");
        return new DateTime(int.Parse(values[5]), int.Parse(values[3]), int.Parse(values[2]), int.Parse(values[1]), int.Parse(values[0]), 0);
    }
}
